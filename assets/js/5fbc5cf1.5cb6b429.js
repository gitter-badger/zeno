"use strict";(self.webpackChunkzeno_docs=self.webpackChunkzeno_docs||[]).push([[207],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var a=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var p=a.createContext({}),s=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=s(t.components);return a.createElement(p.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,p=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(f,i(i({ref:e},u),{},{components:n})):a.createElement(f,i({ref:e},u))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7480:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:2},i="Python API",l={unversionedId:"api",id:"api",title:"Python API",description:"Zeno has 4 primary decorator functions: predictfunction, distillfunction, metricfunction, and transformfunction.",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/docs/api",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"CIFAR-10 Example",permalink:"/docs/intro/cifar"},next:{title:"Configuration file",permalink:"/docs/configuration"}},p={},s=[{value:"ZenoOptions",id:"zenooptions",level:2},{value:"Predict",id:"predict",level:2},{value:"Distill",id:"distill",level:2},{value:"Metric",id:"metric",level:2},{value:"Transform",id:"transform",level:2}],u={toc:s};function c(t){let{components:e,...n}=t;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"python-api"},"Python API"),(0,o.kt)("p",null,"Zeno has 4 primary decorator functions: ",(0,o.kt)("inlineCode",{parentName:"p"},"predict_function"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"distill_function"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"metric_function"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"transform_function"),"."),(0,o.kt)("p",null,"You can pass any number of files with decorated functions to Zeno, but you ",(0,o.kt)("strong",{parentName:"p"},"must have one and only one ",(0,o.kt)("inlineCode",{parentName:"strong"},"predict_function")),"."),(0,o.kt)("h2",{id:"zenooptions"},"ZenoOptions"),(0,o.kt)("p",null,"Every Zeno function is passed a ZenoOptions object with the following parameters.\nThe column values refer to column names in the DataFrame and the paths refer to directories relative to the Zeno configuration file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@dataclass\nclass ZenoOptions:\n    """Parameters passed to Zeno test functions.\n\n    Args:\n        id_column (str): Column in dataframe with unique identifiers.\n        data_column (str): Column in dataframe with either raw data or path to data.\n        label_column (str): Column in dataframe with\n                            either raw labels or path to labels.\n        output_column (str): Column in dataframe with a given\n                             model\'s raw output or path to output\n        data_path (str): Path to directory with data files.\n        label_path (str): Path to directory with label files.\n        output_path (str): Path to directory with a given model\'s output.\n        distill_columns (map[str, str]): Map from distiller name to distill column.\n    """\n\n    id_column: str\n    data_column: str\n    label_column: str\n    output_column: str\n    distill_columns: Dict[str, str]\n    data_path: str\n    label_path: str\n    output_path: str\n')),(0,o.kt)("h2",{id:"predict"},"Predict"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"predict_function")," functions should return a function that returns a list of model outputs for a given model name."),(0,o.kt)("p",null,"The function returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"predict_function")," should take two parameters: a Pandas DataFrame and a ZenoOptions object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@predict_function\ndef predict_function(model_path: Path) -> Callable[[df: DataFrame, ops: ZenoOptions], Any[]]\n")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Load mock model and return outputs"',title:'"Load',mock:!0,model:!0,and:!0,return:!0,'outputs"':!0},"@predict_function\ndef predict_function(model_path):\n    model = load_model(model_path)\n    def pred(df: DataFrame, ops: ZenoOptions):\n        outputs = model(instances)\n        return model(df[ops.data_column])\n    return pred\n")),(0,o.kt)("h2",{id:"distill"},"Distill"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"distill")," functions return a derived metadata column from input data and/or model outputs."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@distill_function\ndef distill(df: pd.DataFrame, ops: ZenoOptions) -> Union[pd.Series, List]:\n")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Get amplitude of sound file"',title:'"Get',amplitude:!0,of:!0,sound:!0,'file"':!0},"@distill_function\ndef amplitude(df, ops: ZenoOptions):\n    files = [os.path.join(ops.data_path, f) for f in df[ops.data_column]]\n    amps = []\n    for audio in files:\n        y, _ = librosa.load(audio)\n        amps.append(np.abs(y).mean())\n    return amps\n")),(0,o.kt)("h2",{id:"metric"},"Metric"),(0,o.kt)("p",null,"Functions with the ",(0,o.kt)("inlineCode",{parentName:"p"},"metric")," decorator return a continuous number given a subset of data.\nMetrics can be classic functions such as accuracy, or specific measures such as word prevalence."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@metric_function\ndef metric_func(df: pd.DataFrame, ops: ZenoOptions) -> float:\n")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="Calculate accuracy of model"',title:'"Calculate',accuracy:!0,of:!0,'model"':!0},"@metric\ndef accuracy(df, ops):\n    return 100 * (df[ops.label_column] == df[ops.output_column]).sum() / len(df)\n")),(0,o.kt)("h2",{id:"transform"},"Transform"),(0,o.kt)("p",null,"Functions with the ",(0,o.kt)("inlineCode",{parentName:"p"},"transform")," decorator return a new, transformed instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@transform_function\ndef metric_func(df: pd.DataFrame, ops: ZenoOptions) -> any:\n")),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",90:!0,className:"language-python",metastring:'title="Rotate images 90 degrees"',title:'"Rotate',images:!0,'degrees"':!0},'@transform_function\ndef rotate(df, ops):\n    for img_path in df[ops.data_column]:\n        img = Image.open(os.path.join(ops.data_path, img_path))\n        rot_img = img.rotate(90)\n        rot_img.save(os.path.join(ops.output_path, "".join(img_path.split("/"))))\n    return ["".join(x.split("/")) for x in list(df[ops.data_column])]\n')))}c.isMDXComponent=!0}}]);